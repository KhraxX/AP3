generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  apartments Apartment[]
  bookings   Booking[]
  reviews    Review[]
}

model Apartment {
  id        String    @id @default(uuid())
  name      String
  address   String
  cityId    String
  ownerId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  city      City      @relation(fields: [cityId], references: [id])
  owner     User      @relation(fields: [ownerId], references: [id])
  bookings  Booking[]
  reviews   Review[]
}

model City {
  id         String      @id @default(uuid())
  name       String      @unique
  apartments Apartment[]
}

model Booking {
  id          String    @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  apartmentId String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Review {
  id          String    @id @default(uuid())
  rating      Int
  comment     String?
  apartmentId String
  userId      String
  createdAt   DateTime  @default(now())
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Role {
  id           Int           @id @default(autoincrement())
  nom          String        @unique
  utilisateurs Utilisateur[]
}

model Utilisateur {
  id         Int        @id @default(autoincrement())
  nom        String
  prenom     String
  email      String     @unique
  motDePasse String
  idRole     Int
  supabaseId String     @unique  // Ajout de cette ligne pour faire le lien avec Supabase
  commandes  Commande[]
  role       Role       @relation(fields: [idRole], references: [id])
}

model Stock {
  id                 Int               @id @default(autoincrement())
  nom                String
  description        String
  quantiteDisponible Int
  type               TypeStock
  detailsCommande    DetailsCommande[]
  mouvements         Mouvement[]
}

model Commande {
  id              Int               @id @default(autoincrement())
  idUtilisateur   Int
  dateCommande    DateTime          @default(now())
  statut          StatutCommande
  utilisateur     Utilisateur       @relation(fields: [idUtilisateur], references: [id])
  detailsCommande DetailsCommande[]
  mouvements      Mouvement[]
}

model DetailsCommande {
  idCommande Int
  idStock    Int
  quantite   Int
  commande   Commande @relation(fields: [idCommande], references: [id])
  stock      Stock    @relation(fields: [idStock], references: [id])

  @@id([idCommande, idStock])
}

model Mouvement {
  id            Int           @id @default(autoincrement())
  idStock       Int
  typeMouvement TypeMouvement
  quantite      Int
  dateMouvement DateTime      @default(now())
  idCommande    Int?
  commande      Commande?     @relation(fields: [idCommande], references: [id])
  stock         Stock         @relation(fields: [idStock], references: [id])
}

enum TypeMouvement {
  entree
  sortie
}

enum TypeStock {
  medicament
  materiel
}

enum StatutCommande {
  en_attente
  validee
  invalidee
}
